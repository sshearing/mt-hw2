#!/usr/bin/env python
import optparse
import math
import sys
from collections import defaultdict

optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-t", "--threshold", dest="threshold", default=0.5, type="float", help="Threshold for aligning with Dice's coefficient (default=0.5)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to use for training and alignment")
optparser.add_option("-a", "--algorithm", dest="alg", default="em", choices=["em", "dice"], help="Choice of algorithm to use for alignment")
(opts, _) = optparser.parse_args()
f_data = "%s.%s" % (opts.train, opts.french)
e_data = "%s.%s" % (opts.train, opts.english)

sys.stderr.write("Training with IBM Model 1...\n")
bitext = [[sentence.strip().split() for sentence in pair] for pair in zip(open(f_data), open(e_data))[:opts.num_sents]]

# initialize t probabilities to uniform values
e_words = set([e_word for (f, e) in bitext for e_word in e])
f_words = set([f_word for (f, e) in bitext for f_word in f])
t = defaultdict(lambda: float(len(e_words) * len(f_words)))


old = float("inf")
convergent = False
while not convergent:

  # initialize
  count = defaultdict(float)
  total = defaultdict(float)

  for (f, e) in bitext:

    # compute normalization
    s_total = defaultdict(float)
    for e_i in e:
      for f_j in f:
        s_total[e_i] += t[(e_i, f_j)]

    # collect counts
    for e_i in e:
      for f_j in f:
        count[(e_i, f_j)] += t[(e_i, f_j)] / s_total[e_i]
        total[f_j] += t[(e_i, f_j)] / s_total[e_i]

  # estimate probabilities
  for f in f_words:
    for e in e_words:
      t[(e, f)] = count[(e, f)] / total[f]
        
  # calculate perplexity
  perp = 0.0
  for (f, e) in bitext:
    perp += -1.0 * math.log(1.0 / (len(f) + 1) ** len(e) * reduce(lambda x, y: x * y, [sum([t[(e_j, f_i)] for f_i in f]) for e_j in e]) / math.log(2))

  # check to see if we have converged
  if perp < old:
    old = perp
  else:
    convergent = True
    
  sys.stderr.write(".")
    
        
  

'''
sys.stderr.write("Training with Dice's coefficient...")
bitext = [[sentence.strip().split() for sentence in pair] for pair in zip(open(f_data), open(e_data))[:opts.num_sents]]
f_count = defaultdict(int)
e_count = defaultdict(int)
fe_count = defaultdict(int)
for (n, (f, e)) in enumerate(bitext):
  for f_i in set(f):
    f_count[f_i] += 1
    for e_j in set(e):
      fe_count[(f_i,e_j)] += 1
  for e_j in set(e):
    e_count[e_j] += 1
  if n % 500 == 0:
    sys.stderr.write(".")

dice = defaultdict(int)
for (k, (f_i, e_j)) in enumerate(fe_count.keys()):
  dice[(f_i,e_j)] = 2.0 * fe_count[(f_i, e_j)] / (f_count[f_i] + e_count[e_j])
  if k % 5000 == 0:
    sys.stderr.write(".")
sys.stderr.write("\n")

for (f, e) in bitext:
  for (i, f_i) in enumerate(f): 
    for (j, e_j) in enumerate(e):
      if dice[(f_i,e_j)] >= opts.threshold:
        sys.stdout.write("%i-%i " % (i,j))
  sys.stdout.write("\n")
'''
